#+TITLE: Emacs Configuration
#+AUTHOR: jmchung
* 기본설정
** Personal Information

#+begin_src emacs-lisp
(setq user-full-name "jmchung"
      user-mail-address "hijam76@gmail.com")
#+end_src

** Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]. 

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

** Sane defaults

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq-default file-name-coding-system 'utf-8)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)
#+end_src

* 내 설정
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** 폰트설정
#+BEGIN_SRC emacs-lisp
(set-frame-font "Ubuntu Mono-13" nil t)
(set-fontset-font t 'hangul (font-spec :name "D2Coding"))
(setq-default line-spacing 1)
#+END_SRC

** 타이틀에 경로표시
#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format
              '(:eval
                (format "%s@%s: %s %s"
                        (or (file-remote-p default-directory 'user)
                            user-real-login-name)
                        (or (file-remote-p default-directory 'host)
                            system-name)
                        (buffer-name)
                        (cond
                         (buffer-file-truename
                          (concat "(" buffer-file-truename ")"))
                         (dired-directory
                          (concat "{" dired-directory "}"))
                         (t
                          "[no file]")))))

#+END_SRC

** avy M-s로 글자찾기 빠르게
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind("M-s" . avy-goto-char))
#+END_SRC

** which-key 단축키 자동완성
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** python 인터프리터 설정
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC

** auto complete 자동완성
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

** markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** cobol mode, velocity mode
-#+BEGIN_SRC emacs-lisp
(autoload 'cobol-mode "cobol-mode" "A major mode for editing ANSI Cobol/Scobol files." t nil)

(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(add-to-list 'auto-mode-alist '("\\.\\(cbl\\|pco\\|cob\\)$" . cobol-mode))

(autoload 'vtl-mode "vtl" nil t)
(add-hook 'html-mode-hook 'turn-on-vtl-mode t t)
(add-hook 'xml-mode-hook 'turn-on-vtl-mode t t)
(add-hook 'text-mode-hook 'turn-on-vtl-mode t t)

-#+END_SRC
** 단축키
#+begin_src emacs-lisp
    ;;shortcut
    (bind-key* "<f2>" 'recentf-open-files)
  ;  (global-set-key (kbd "<f2>") 'recentf-open-files)
    (bind-key* "<C-return>" 'other-window)

    (defalias 'list-buffers 'ibuffer) ; make ibuffer default
    ;(windmove-default-keybindings 'meta)
    
#+end_src

** 큰파일은 기본모드로
#+BEGIN_SRC emacs-lisp
  (defun my-find-file-check-make-large-file-read-only-hook ()
    "if a file is over a given size, make the buffer read only."
    (when (> (buffer-size) (* 1024 1024 1024))
      (setq buffer-read-only t)
      (buffer-disable-undo)
      (fundamental-mode)))
  
  ;(add-hook 'find-file-hook 'my-find-file-check-make-large-file-read-only-hook)
#+END_SRC
